#!/usr/bin/env php
<?php
require dirname(__DIR__) . '/vendor/autoload.php';
use GuzzleHttp\Message\Response;
use GuzzleHttp\Client;
use GuzzleHttp\Exception\ClientException;

if ($argc != 3) {
    file_put_contents('php://stderr', "Usage: {$argv[0]} {repo_owner} {repo_name}\n");
    exit();
}

$owner = $argv[1];
$repo = $argv[2];

$token = '';
$tokenFile = dirname(__DIR__) . '/.access_token';
if (file_exists($tokenFile)) {
    $token = file_get_contents($tokenFile);
}

if (!$token) {
    $token = readline("Please enter a github access token:\n");
    file_put_contents($tokenFile, $token);
}

$client = new Client([
    'base_url' => 'https://api.github.com/',
    'defaults' => [
        'headers' => ['Authorization' => "token {$token}"],
     ],
]);

$res = $client->get("repos/{$owner}/{$repo}/releases");

$releases = $res->json();

$tagName = $releases[0]['tag_name'];

try {
    $res = $client->get("repos/{$owner}/{$repo}/compare/{$tagName}...master");
    $commits = $res->json();
} catch (ClientException $e) {
    file_put_contents('php://stderr', "There was a problem accessing the last release.  Is it possible that a draft has already been created?\n");
    exit();
}

$releaseNotes = '';
foreach ($commits['commits'] as $commit) {
    if (count($commit['parents']) == 2) {
        preg_match('/Merge pull request #([0-9]*)[^\n]*\n[^\n]*\n(.*)/s', $commit['commit']['message'], $matches);
        $prNum = $matches[1];
        $message = $matches[2];
        $releaseNotes .= "* {$message}&nbsp;<sup>[PR&nbsp;#{$prNum}]</sup>\n";
    }
}

$nextTagName = getNextTagName($tagName);
$nextVersionNumber = preg_replace('#[^0-9\.]#', '', $nextTagName);

$randomNameDir = dirname(__DIR__) . '/vgng';
$randomName = exec("cd {$randomNameDir}; ./vgng.py");

$postData = [
    'tag_name' => $nextTagName,
    'name' => "Version {$nextVersionNumber}: $randomName",
    'body' => trim($releaseNotes),
    'draft' => true
];

$client->post("/repos/{$owner}/{$repo}/releases", ['body' => json_encode($postData)]);

function getNextTagName($tagName) {
    $parts = explode('.', $tagName);
    $parts[count($parts) - 1]++;
    return implode('.', $parts);
}
